function [X,Xv] = LearningDMPComparison(Xdata,Xvel,dt,time_,plotsNew)% Function to learn a RCP in batch mode% Modified by Ilaria Lauzana% Originally distributed with function 'rcp' for:% A rhythmic movement primitive (RCP) as suggested in% Ijspeert A, Nakanishi J, Schaal S (2003) Learning attractor landscapes for % learning motor primitives. In: Becker S, Thrun S, Obermayer K (eds) Advances % in Neural Information Processing Systems 15. MIT Press, Cambridge, MA.% http://www-clmc.usc.edu/publications/I/ijspeert-NIPS2002.pdf% This version simplfies the primitive and only uses a one dimensional% function fitting.% % Copyright June, 2006 by%           Stefan Schaal and Auke Ijspeertglobal rcps;X = [];Xv = [];tau = 1;for n = 1:size(Xdata,2)    % general parameters    ym     = mean(Xdata(:,n));%0.5 * (min(Xdata(:,n))+max(Xdata(:,n)));    n_rfs  = 50;    ID     = n;    % Find period to calculate tau:    [~,peaks]=findpeaks(Xdata(:,1),'MinPeakProminence',(max(Xdata(:,n))-min(Xdata(:,n)))/4);    if peaks        tau = mean(diff(time_(peaks)))*dt *4 / (2*pi);    end    A = max(Xdata(:,n)) - ym;        % initialize some arrays for data monitoring    T   = [Xdata(:,n),Xvel(:,n)];%zeros(round(2*tau/dt+1),3);    P   = zeros(length(T),2);    Z   = zeros(length(T),2);    Y   = zeros(length(T),3);    PSI = zeros(length(T),n_rfs);    W   = zeros(length(T),n_rfs);        % this rcp will learn from the target data    rcp('init',ID,n_rfs,'learn_rcp_incremental');    rcp('reset_state',ID);    rcp('set_baseline',ID,ym);    rcp('set_amplitude',ID,A);        % batch fitting    [Yp,Ypd,Ypdd]=rcp('batch_fit',ID,tau,dt,T(:,1),T(:,2));        % create predicted trajectory    rcp('reset_state',ID);    rcp('set_baseline',ID,ym);    rcp('set_amplitude',ID,A);    rcp('change',ID,'y',Xdata(1,n));        for i=0:length(T)-1        [y,yd,ydd]=rcp('run',ID,tau,dt);        P(i+1,:)   = [rcps(ID).p rcps(ID).pd];        Z(i+1,:)   = [rcps(ID).z rcps(ID).zd];        Y(i+1,:)   = [y yd ydd];        PSI(i+1,:) = rcps(ID).psi';        W(i+1,:,:) = rcps(ID).w;    end        % plotting    %time = (0:dt:tau*2)';        if plotsNew        figure(n);        clf;                % plot position and velocity vs. target        subplot(331);        plot(time_,[Y(:,1) T(:,1)]) ;        title('y');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(332);        plot(time_,[Y(:,2) T(:,2)]);        title('yd');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(333);        if size(T,2) > 2            plot(time_,[Y(:,3) T(:,3)]);        else            plot(time_,Y(:,3));        end        title('ydd');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                % plot internal states        subplot(334);        plot(time_,Z(:,1));        title('z');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(335);        plot(time_,Z(:,2));        title('zd');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(336);        plot(time_,PSI);        title('Weighting Kernels');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(337);        plot(time_,P(:,1));        title('p');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(338);        plot(time_,P(:,2));        title('pd');        aa=axis;        axis([min(time_) max(time_) aa(3:4)]);                subplot(339);        plot(W(end,:));        title('Weights');        xlabel(sprintf('tau=%f',tau));                drawnow;    end        X = [X, Yp];    Xv = [Xv, Ypd];    endend